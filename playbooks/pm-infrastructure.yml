---
# example command line:
#ansible-playbook -i playbooks/hosts playbooks/deploy-photo_mapper.yml  --private-key=~/.ssh/photo_mapper.pem 
- name: provision SGs and instance
  hosts: localhost
  vars:
    region: us-east-1
    instance_type: t2.micro
    instance_profile: photo_mapper
    key_name: photo_mapper
    # ubuntu
    mongodb_image: ami-fce3c696
    mongodb_ip: 172.31.51.90
    # latest aws ecs-optimized for docker hosts
    docker_image: ami-2b3b6041
    mongodb_count: 1
    docker_count: 3
  tasks:
  - name: create ssh security group
    ec2_group:
     name: ssh
     region: "{{region}}"
     description: allow inbound ssh
     rules:
     - proto: tcp
       from_port: 22
       to_port: 22
       cidr_ip: 0.0.0.0/0
  - name: create http security group
    ec2_group:
     name: http
     region: "{{region}}"
     description: allow inbound http
     rules:
     - proto: tcp
       from_port: 80
       to_port: 80
       cidr_ip: 0.0.0.0/0
  - name: create mongodb security group
    ec2_group:
     name: mongodb
     region: "{{region}}"
     description: allow inbound mongodb connectivity
     rules:
     - proto: tcp
       from_port: 27017
       to_port: 27017
       # should be smarter about this -- no
       # no reason that ANYTHING outside of vpc
       # needs to access this:
       cidr_ip: 0.0.0.0/0
  - name: create outbound security group
    ec2_group:
     name: outbound
     region: "{{region}}"
     description: allow outbound connections
     rules_egress:
     - proto: all
       cidr_ip: 0.0.0.0/0

  - name: create docker instance
    ec2:
     image: "{{docker_image}}"
     region: "{{region}}"
     instance_type: "{{instance_type}}"
     instance_profile_name: "{{instance_profile}}"
     instance_tags: { type: pm_docker }
     key_name: "{{key_name}}"
     count_tag: { type: pm_docker }
     exact_count: "{{docker_count}}"
     group: [ ssh, outbound, http ]
     wait: yes
    register: docker_ct

  - name: create mongodb instance
    ec2:
     image: "{{mongodb_image}}"
     region: "{{region}}"
     instance_type: "{{instance_type}}"
     instance_profile_name: "{{instance_profile}}"
     instance_tags: { type: pm_mongodb }
     assign_public_ip: no
     private_ip: "{{mongodb_ip}}"
     key_name: "{{key_name}}"
     count_tag: { type: pm_mongodb }
     exact_count: "{{mongodb_count}}"
     group: [ssh, outbound, mongodb]
     wait: yes
    register: mongodb_ct

  - name: add instance to inventory / mongodb_aws group
    add_host:
     hostname: "{{item.private_ip}}"
     groups: mongodb_aws
    with_items: mongodb_ct.tagged_instances

  - name: add instance to inventory / docker_aws group
    add_host:
     hostname: "{{item.private_ip}}"
     groups: docker_aws
    with_items: docker_ct.tagged_instances

  - name: wait for mongo instance accessible
    wait_for:
     host: "{{item.private_ip}}"
     port: 22
     search_regex: "OpenSSH"
    with_items: mongodb_ct.tagged_instances

  - name: wait for docker instance accessible
    wait_for:
     host: "{{item.private_ip}}"
     port: 22
     search_regex: "OpenSSH"
    with_items: docker_ct.tagged_instances

# mongo provision play
- name: mongodb on mongodb_ct.tagged_instances
  vars:
    mongodb_bind_address: 0.0.0.0
  hosts: mongodb_aws
  remote_user: ubuntu
  become: yes
  roles:
  - mongodb
